from typing import Dict, Tuple, List
from .commandhandler import GenericCommandHandler

class CommandManager:
    def __init__(self, command_configs: Tuple[Dict], devices_dict: Dict, init_timeout: float, init_n_repeats: int,
                 simulation: bool = False): ...
    def add_command_handler(self, handler_config: Dict) -> None: ...
    def remove_command_handler(self, handler_to_remove: GenericCommandHandler) -> None: ...
    def set_devices_as_attributes(self) -> None: ...
    def handle_init(self, *arg) -> None: ...
    def request_init(self, handler: GenericCommandHandler) -> None: ...
    def request_and_wait_for_init(self, handler: GenericCommandHandler) -> Tuple[bool, float]: ...
    def wait_device_for_init(self, handler: GenericCommandHandler) -> float: ...
    def register_all_devices(self, devices_dict: Dict) -> None: ...
    def register_device(self, device_name: str, device_info: Dict) -> None: ...
    def unregister_device(self, device_name: str) -> None: ...
    @classmethod
    def from_config(cls, config) -> CommandManager: ...
    @classmethod
    def from_configfile(cls, configfile: str, simulation: bool) -> CommandManager: ...
    def unrecognized(self, cmd: str) -> None: ...

class CommandBonjour:
    def __init__(self, commandhandlers: List[GenericCommandHandler], timeout: float): ...
    def clear_bonjour_info(self) -> None: ...
    def handle_bonjour(self, *arg) -> None: ...
    def send_bonjour(self, handler: GenericCommandHandler, command_id: str) -> None: ...
    def get_bonjour_id(self, handler: GenericCommandHandler, command_id: str) -> Tuple[str, bool, float]: ...
    def detect_device(self, command_id: str) -> Tuple[GenericCommandHandler, str, float]: ...

class VirtualAttribute: ...
class VirtualDevice: ...
