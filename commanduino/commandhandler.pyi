import threading
import serial
from typing import Dict, Callable, List, Union

class CommandHandler:
    @classmethod
    def from_config(cls, config: Dict) -> CommandHandler: ...
    def __init__(self, delim: str, term: str, cmd_decimal: int, **kwargs): ...
    def process_char(self, a_char: bytes) -> None: ...
    def handle(self, cmd: str) -> None: ...
    def build_remaining(self, cmd_list: List[str]) -> str: ...
    def add_command(self, command_id: str, callback_function: Callable) -> None: ...
    def remove_command(self, command_id: str, callback_function: Callable) -> None: ...
    def add_relay(self, command_id: str, callback_function: Callable) -> None: ...
    def remove_relay(self, command_id: str, callback_function: Callable) -> None: ...
    def add_default_handler(self, callback_function: Callable) -> None: ...
    def remove_default_handler(self, callback_function: Callable) -> None: ...
    def set_command_header(self, cmd_header: str, add_delim: bool = True) -> None: ...
    def set_command_decimal(self, cmd_decimal: int) -> None: ...
    def forge_command(self, command_id: str, *args) -> str: ...

class SerialCommandHandler(threading.Thread, CommandHandler):
    def __init__(self, port: str, baudrate: int, timeout: float, delim: str, term: str, cmd_decimal: int): ...
    def open(self, port: str, baudrate: int, timeout: float) -> None: ...
    def close(self) -> None: ...
    def stop(self) -> None: ...
    def run(self) -> None: ...
    def send(self, command_id: str, *arg) -> None: ...
    def write(self, msg: str) -> None: ...
    def process_serial(self, a_serial: serial.Serial) -> None: ...
    def wait_until_running(self, sleep_time: float = 0.01) -> None: ...

class TCPIPCommandHandler(threading.Thread, CommandHandler):
    def __init__(self, port: str, address: str, protocol: str, timeout: float, delim: str, term: str, cmd_decimal: int): ...
    def open(self, port: str, address: str, protocol: str, timeout: float): ...
    def close(self) -> None: ...
    def stop(self) -> None: ...
    def run(self) -> None: ...
    def send(self, command_id: str, *arg) -> None: ...
    def write(self, msg: str) -> None: ...
    def process_data(self) -> None: ...
    def wait_until_running(self) -> None: ...

GenericCommandHandler = Union[SerialCommandHandler, TCPIPCommandHandler]
